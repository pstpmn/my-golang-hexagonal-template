// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ICache is an autogenerated mock type for the ICache type
type ICache struct {
	mock.Mock
}

// Cache provides a mock function with given fields: ctx, key, data, expireTime
func (_m *ICache) Cache(ctx context.Context, key string, data string, expireTime time.Time) (bool, error) {
	ret := _m.Called(ctx, key, data, expireTime)

	if len(ret) == 0 {
		panic("no return value specified for Cache")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) (bool, error)); ok {
		return rf(ctx, key, data, expireTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) bool); ok {
		r0 = rf(ctx, key, data, expireTime)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Time) error); ok {
		r1 = rf(ctx, key, data, expireTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CacheIgnoreDuplcateKey provides a mock function with given fields: ctx, key, data, expireTime
func (_m *ICache) CacheIgnoreDuplcateKey(ctx context.Context, key string, data string, expireTime time.Time) error {
	ret := _m.Called(ctx, key, data, expireTime)

	if len(ret) == 0 {
		panic("no return value specified for CacheIgnoreDuplcateKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time) error); ok {
		r0 = rf(ctx, key, data, expireTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, key
func (_m *ICache) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, key
func (_m *ICache) Get(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewICache creates a new instance of ICache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICache(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICache {
	mock := &ICache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
